// Code generated by goyacc -o parser.go expr.y. DO NOT EDIT.

//line expr.y:3
package ast

import __yyfmt__ "fmt"

//line expr.y:3

import ()

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const BOOL = 57349
const NIL = 57350
const EQ = 57351
const AND = 57352
const OR = 57353
const NOTEQ = 57354
const GT = 57355
const GTE = 57356
const LT = 57357
const LTE = 57358
const ORR = 57359
const ACC = 57360
const IF = 57361
const ELSE = 57362
const FOR = 57363
const IN = 57364
const ACC2 = 57365
const CONST = 57366
const LAMB = 57367
const UMINUS = 57368

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"BOOL",
	"NIL",
	"EQ",
	"AND",
	"OR",
	"NOTEQ",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"ORR",
	"ACC",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"ACC2",
	"CONST",
	"LAMB",
	"';'",
	"'='",
	"'?'",
	"':'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"'|'",
	"'!'",
	"'^'",
	"'['",
	"']'",
	"UMINUS",
	"'{'",
	"'}'",
	"','",
	"'('",
	"')'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line expr.y:136

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	43, 30,
	44, 30,
	-2, 35,
	-1, 76,
	27, 32,
	-2, 40,
	-1, 77,
	27, 33,
	-2, 45,
}

const yyPrivate = 57344

const yyLast = 476

var yyAct = [...]int8{
	51, 2, 79, 50, 55, 103, 85, 86, 44, 45,
	94, 88, 87, 109, 93, 96, 84, 54, 57, 5,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 78, 80,
	81, 82, 83, 25, 28, 29, 30, 31, 32, 33,
	34, 35, 37, 90, 57, 52, 37, 77, 91, 41,
	27, 100, 36, 40, 19, 20, 21, 22, 26, 24,
	39, 99, 23, 38, 3, 53, 23, 38, 43, 56,
	92, 42, 49, 47, 18, 98, 11, 46, 4, 1,
	102, 0, 101, 0, 0, 104, 105, 107, 0, 106,
	108, 25, 28, 29, 30, 31, 32, 33, 34, 35,
	37, 0, 76, 0, 0, 0, 0, 0, 27, 0,
	36, 0, 19, 20, 21, 22, 26, 24, 0, 0,
	23, 38, 97, 25, 28, 29, 30, 31, 32, 33,
	34, 35, 37, 0, 0, 0, 0, 0, 0, 0,
	27, 0, 36, 95, 19, 20, 21, 22, 26, 24,
	0, 0, 23, 38, 25, 28, 29, 30, 31, 32,
	33, 34, 35, 37, 0, 0, 0, 0, 0, 0,
	0, 27, 0, 36, 89, 19, 20, 21, 22, 26,
	24, 0, 0, 23, 38, 25, 28, 29, 30, 31,
	32, 33, 34, 35, 37, 0, 0, 0, 0, 0,
	0, 0, 27, 0, 36, 0, 19, 20, 21, 22,
	26, 24, 0, 0, 23, 38, 25, 28, 29, 30,
	31, 32, 33, 34, 35, 37, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 0, 19, 20, 21,
	22, 26, 24, 0, 0, 23, 38, 25, 28, 29,
	30, 31, 32, 33, 34, 35, 37, 0, 10, 12,
	14, 13, 15, 0, 0, 0, 0, 0, 19, 20,
	21, 22, 26, 24, 0, 0, 23, 38, 6, 0,
	0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
	0, 7, 0, 17, 0, 0, 9, 0, 0, 16,
	25, 28, 29, 30, 31, 32, 33, 34, 0, 37,
	0, 48, 12, 14, 13, 15, 0, 0, 0, 0,
	0, 19, 20, 21, 22, 26, 24, 0, 0, 23,
	38, 6, 0, 0, 0, 0, 0, 0, 8, 0,
	0, 0, 0, 0, 7, 0, 17, 0, 0, 9,
	0, 0, 16, 25, 28, 29, 30, 31, 32, 33,
	34, 0, 37, 25, 28, 29, 30, 31, 32, 33,
	34, 0, 37, 0, 0, 0, 21, 22, 26, 24,
	0, 0, 23, 38, 0, 0, 0, 0, 26, 24,
	0, 0, 23, 38, 25, 28, 29, 30, 31, 32,
	33, 34, 0, 37, 25, 28, 29, 30, 31, 32,
	33, 34, 0, 37, 0, 0, 0, 0, 0, 0,
	24, 0, 25, 23, 38, 30, 31, 32, 33, 34,
	0, 37, 0, 23, 38, 25, 28, 0, 30, 31,
	32, 33, 34, 0, 37, 0, 0, 0, 0, 0,
	0, 23, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 38,
}

var yyPact = [...]int16{
	264, -1000, 186, 43, 36, 32, 74, 264, 264, 317,
	30, -1000, -1000, -1000, -1000, -1000, 264, 264, -1000, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, -11, -1000, 38, -1000, -37, -31, 30, -33,
	-1000, 155, 264, 264, 34, -26, -34, 186, 354, 354,
	364, 364, 38, 405, 38, 395, 217, 423, 436, 38,
	38, 38, 38, 38, 301, 124, -1000, -1000, -1000, -14,
	92, 217, 217, 217, 264, 46, 57, -1000, 264, 264,
	217, -41, -1000, -1000, 264, 264, 264, -1000, 217, 264,
	-1000, -1000, 186, -1000, 186, 248, -27, 186, 217, -1000,
}

var yyPgo = [...]int8{
	0, 89, 0, 74, 88, 19, 87, 86, 84, 4,
	83, 2, 82, 3, 79,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	6, 6, 4, 4, 8, 3, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 11, 11,
	5, 10, 10, 12, 12, 12, 13, 9, 9, 14,
	14, 14,
}

var yyR2 = [...]int8{
	0, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 5, 5, 3, 1,
	1, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 4, 3, 3, 3, 1, 1, 6, 0, 1,
	4, 0, 1, 1, 3, 2, 3, 0, 1, 1,
	3, 2,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, 24, 37, 31, 42,
	4, -7, 5, 7, 6, 8, 45, 39, -8, 30,
	31, 32, 33, 38, 35, 9, 34, 26, 10, 11,
	12, 13, 14, 15, 16, 17, 28, 18, 39, 27,
	27, 27, -3, 4, -2, -2, -6, -10, 4, -12,
	-13, -2, 25, 45, -2, -9, -14, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -3, -5, -2, -11,
	-2, -2, -2, -2, 27, 43, 44, 43, 44, 29,
	-2, -9, 46, 40, 44, 29, 29, 40, -2, 25,
	4, -13, -2, 46, -2, -2, -11, -2, -2, 40,
}

var yyDef = [...]int8{
	0, -2, 1, 40, 0, 45, 0, 0, 0, 51,
	35, 29, 36, 37, 38, 39, 0, 57, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 11, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 35, 24, 25, 0, 0, -2, 52,
	53, 0, 0, 57, 0, 0, 58, 59, 2, 3,
	4, 5, 6, 7, 8, 9, 10, 16, 17, 18,
	19, 20, 21, 22, 23, 0, -2, -2, 34, 0,
	49, 12, 13, 14, 0, 0, 0, 43, 55, 0,
	28, 0, 42, 44, 61, 0, 48, 50, 15, 0,
	31, 54, 56, 41, 60, 26, 0, 49, 27, 47,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 37, 3, 3, 3, 34, 35, 3,
	45, 46, 32, 30, 44, 31, 3, 33, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 29, 26,
	3, 27, 3, 28, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 39, 3, 40, 38, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 42, 36, 43,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 41,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:38
		{
			yylex.(Setter).SetRoot(yyS[yypt-0].node)
			yyVAL.node = yyS[yypt-0].node
		}
	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:42
		{
			yyVAL.node = &Binary{Op: "+", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:43
		{
			yyVAL.node = &Binary{Op: "-", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:44
		{
			yyVAL.node = &Binary{Op: "*", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:45
		{
			yyVAL.node = &Binary{Op: "/", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:46
		{
			yyVAL.node = &Binary{Op: "^", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:47
		{
			yyVAL.node = &Binary{Op: "&", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:48
		{
			yyVAL.node = &Binary{Op: "==", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:49
		{
			yyVAL.node = &Binary{Op: "%", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:50
		{
			yyVAL.node = &Binary{Op: ";", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:51
		{
			yyVAL.node = yyDollar[1].node
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:52
		{
			yyVAL.node = &Set{L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:53
		{
			yyVAL.node = &Set{L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:54
		{
			yyVAL.node = &Set{L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:55
		{
			yyVAL.node = &Set{L: yyDollar[2].node, R: yyDollar[4].node, Const: true}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:56
		{
			yyVAL.node = &Binary{Op: "&&", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:57
		{
			yyVAL.node = &Binary{Op: "||", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:58
		{
			yyVAL.node = &Binary{Op: "!=", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:59
		{
			yyVAL.node = &Binary{Op: ">", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:60
		{
			yyVAL.node = &Binary{Op: ">=", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:61
		{
			yyVAL.node = &Binary{Op: "<", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:62
		{
			yyVAL.node = &Binary{Op: "<=", L: yyS[yypt-2].node, R: yyS[yypt-0].node}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:63
		{
			yyVAL.node = &Call{Name: "orr", Args: []Node{yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:64
		{
			yyVAL.node = &Unary{Op: "!", X: yyS[yypt-0].node}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:65
		{
			yyVAL.node = &Unary{Op: "-", X: yyS[yypt-0].node}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line expr.y:66
		{
			yyVAL.node = &Call{Name: "ternary", Args: []Node{yyS[yypt-4].node, yyS[yypt-2].node, yyS[yypt-0].node}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line expr.y:67
		{
			yyVAL.node = &Lambda{L: yyDollar[2].strs, R: yyDollar[5].node}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:68
		{
			yyVAL.node = &Lambda{L: []string{yyDollar[1].str}, R: yyDollar[3].node}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:69
		{
			yyVAL.node = yyS[yypt-0].node
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:73
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:74
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:77
		{
			yyVAL.node = &Access{L: yyDollar[1].node, R: yyDollar[3].node}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:78
		{
			yyVAL.node = &Access{L: yyDollar[1].node, R: yyDollar[3].node}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:81
		{
			yyVAL.node = &Access{L: yyDollar[1].node, R: yyDollar[3].node}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:84
		{
			yyVAL.node = &Variable{Name: yyDollar[1].str}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:87
		{
			yyVAL.node = &Number{Val: yyS[yypt-0].num}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:88
		{
			yyVAL.node = &Bool{Val: yyS[yypt-0].boolean}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:89
		{
			yyVAL.node = &String{Val: yyS[yypt-0].str}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:90
		{
			yyVAL.node = &Nil{}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:91
		{
			yyVAL.node = yyDollar[1].node
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:92
		{
			yyVAL.node = &Call{Name: yyS[yypt-3].str, Args: yyS[yypt-1].nodes}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:93
		{
			yyVAL.node = yyS[yypt-1].node
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:94
		{
			yyVAL.node = &MapSet{Kvs: yyDollar[2].kvs}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:95
		{
			yyVAL.node = &ArrDef{V: yyDollar[2].nodes}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:96
		{
			yyVAL.node = yyDollar[1].node
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:97
		{
			yyVAL.node = yyDollar[1].node
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line expr.y:98
		{
			yyVAL.node = &SliceCut{V: yyDollar[1].node, St: yyDollar[3].node, Ed: yyDollar[5].node}
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line expr.y:106
		{
			yyVAL.node = nil
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:107
		{
			yyVAL.node = yyDollar[1].node
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:110
		{
			yyVAL.node = &ArrAccess{L: yyDollar[1].node, R: yyDollar[3].node}
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line expr.y:113
		{
			yyVAL.kvs = nil
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:114
		{
			yyVAL.kvs = yyDollar[1].kvs
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:117
		{
			yyVAL.kvs = []KV{yyDollar[1].kv}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:118
		{
			yyVAL.kvs = append(yyDollar[1].kvs, yyDollar[3].kv)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:119
		{
			yyVAL.kvs = yyDollar[1].kvs
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:122
		{
			yyVAL.kv = KV{K: yyDollar[1].node, V: yyDollar[3].node}
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line expr.y:126
		{
			yyVAL.nodes = nil
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:127
		{
			yyVAL.nodes = yyS[yypt-0].nodes
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:131
		{
			yyVAL.nodes = []Node{yyS[yypt-0].node}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:132
		{
			yyVAL.nodes = append(yyS[yypt-2].nodes, yyS[yypt-0].node)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:133
		{
			yyVAL.nodes = yyDollar[1].nodes
		}
	}
	goto yystack /* stack new state and value */
}
